"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-expression */
var chai_1 = require("chai");
var mocha_1 = require("mocha");
var sinon_1 = __importDefault(require("sinon"));
var sinon_chai_1 = __importDefault(require("sinon-chai"));
var src_1 = __importDefault(require("../src"));
chai_1.use(sinon_chai_1.default);
var params = {
    rules: {
        common: {
            rate: 30,
            limit: 1,
            priority: 3
        },
        individual: {
            rate: 30,
            limit: 1,
            priority: 1
        },
        group: {
            rate: 3,
            limit: 1,
            priority: 2
        }
    },
    retryTime: 100
};
mocha_1.describe('Smart queue', function () {
    mocha_1.it('should be defined', function () {
        var queue = new src_1.default(params);
        chai_1.expect(queue).not.to.be.undefined;
    });
    mocha_1.it('should be an object', function () {
        var queue = new src_1.default(params);
        chai_1.expect(queue).to.be.an('object');
    });
    mocha_1.it('should have all required methods and fields', function () {
        var queue = new src_1.default(params);
        chai_1.expect(queue).to.have.property('request');
        chai_1.expect(queue).to.have.property('totalLength');
        chai_1.expect(queue).to.have.property('isOverheated');
    });
    mocha_1.it('should make requests', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    request = sinon_1.default.stub().returns(1);
                    return [4 /*yield*/, queue.request(request)];
                case 1:
                    result = _a.sent();
                    chai_1.expect(result).to.eq(1);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should cool down queue after request', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    request = sinon_1.default.stub();
                    return [4 /*yield*/, queue.request(request)];
                case 1:
                    _a.sent();
                    chai_1.expect(queue.totalLength).to.eq(0);
                    chai_1.expect(queue.isOverheated).to.eq(false);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should measure length', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request;
        return __generator(this, function (_a) {
            queue = new src_1.default(params);
            request = sinon_1.default.stub();
            queue.request(request);
            queue.request(request);
            queue.request(request);
            chai_1.expect(queue.totalLength).to.eq(3);
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('should have length 0 after request', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    request = sinon_1.default.stub();
                    return [4 /*yield*/, queue.request(request)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, queue.request(request)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, queue.request(request)];
                case 3:
                    _a.sent();
                    chai_1.expect(queue.totalLength).to.eq(0);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should execute sequentally', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request, callback;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    request = sinon_1.default
                        .stub()
                        .onFirstCall()
                        .returns(1)
                        .onSecondCall()
                        .returns(2)
                        .onThirdCall()
                        .returns(3);
                    callback = sinon_1.default.spy();
                    return [4 /*yield*/, queue.request(request).then(callback)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, queue.request(request).then(callback)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, queue.request(request).then(callback)];
                case 3:
                    _a.sent();
                    chai_1.expect(callback).to.have.been.calledThrice;
                    chai_1.expect(callback.getCall(0)).to.have.been.calledWith(1);
                    chai_1.expect(callback.getCall(1)).to.have.been.calledWith(2);
                    chai_1.expect(callback.getCall(2)).to.have.been.calledWith(3);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should not execute calls faster than rate limit', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request, callback, rateLimit, firstEnd, secondEnd;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    request = sinon_1.default.stub();
                    callback = sinon_1.default.spy();
                    rateLimit = Math.round((params.rules.common.limit / params.rules.common.rate) * 1000);
                    return [4 /*yield*/, queue.request(request).then(callback)];
                case 1:
                    _a.sent();
                    firstEnd = Date.now();
                    return [4 /*yield*/, queue.request(request).then(callback)];
                case 2:
                    _a.sent();
                    secondEnd = Date.now();
                    chai_1.expect(secondEnd - firstEnd).is.gte(rateLimit);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should make retry', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, callback, retryFlag;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    callback = sinon_1.default.spy();
                    retryFlag = false;
                    return [4 /*yield*/, queue
                            .request(function (retry) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (!retryFlag) {
                                    retryFlag = true;
                                    retry(0.1);
                                    return [2 /*return*/];
                                }
                                return [2 /*return*/, 1];
                            });
                        }); })
                            .then(callback)];
                case 1:
                    _a.sent();
                    chai_1.expect(callback).to.have.been.calledOnce;
                    chai_1.expect(callback).to.have.been.calledWith(1);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should make retry with default config param', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, callback, retryFlag;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(Object.assign({}, params, { retryTime: 0.1 }));
                    callback = sinon_1.default.spy();
                    retryFlag = false;
                    return [4 /*yield*/, queue
                            .request(function (retry) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (!retryFlag) {
                                    retryFlag = true;
                                    retry();
                                    return [2 /*return*/];
                                }
                                return [2 /*return*/, 1];
                            });
                        }); })
                            .then(callback)];
                case 1:
                    _a.sent();
                    chai_1.expect(callback).to.have.been.calledOnce;
                    chai_1.expect(callback).to.have.been.calledWith(1);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should return error', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request, callback;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    request = sinon_1.default.stub().throws();
                    callback = sinon_1.default.spy();
                    return [4 /*yield*/, queue.request(request).catch(callback)];
                case 1:
                    _a.sent();
                    chai_1.expect(callback).to.have.been.calledOnce;
                    chai_1.expect(callback).to.have.been.calledWith(sinon_1.default.match.instanceOf(Error));
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should hit overall heat limit', function () { return __awaiter(_this, void 0, void 0, function () {
        var overallRule, queue, rateLimit, request, callback, firstEnd, secondEnd;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    overallRule = {
                        rate: 10,
                        limit: 1
                    };
                    queue = new src_1.default(Object.assign({}, params, {
                        ignoreOverallOverheat: false,
                        overall: overallRule
                    }));
                    rateLimit = Math.round((overallRule.limit / overallRule.rate) * 1000);
                    request = sinon_1.default.stub();
                    callback = sinon_1.default.spy();
                    return [4 /*yield*/, queue.request(request).then(callback)];
                case 1:
                    _a.sent();
                    firstEnd = Date.now();
                    return [4 /*yield*/, queue.request(request).then(callback)];
                case 2:
                    _a.sent();
                    secondEnd = Date.now();
                    chai_1.expect(secondEnd - firstEnd).is.gte(rateLimit);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should create new rule if nothing found', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request, callback;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    request = sinon_1.default.stub().returns(1);
                    callback = sinon_1.default.spy();
                    return [4 /*yield*/, queue.request(request, '1', 'lol').then(callback)];
                case 1:
                    _a.sent();
                    chai_1.expect(callback).to.have.been.calledOnce;
                    chai_1.expect(callback).to.have.been.calledWith(1);
                    // @ts-ignore
                    chai_1.expect(queue.params.rules).to.have.property('lol');
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should prioritize calls', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request, callback;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(params);
                    request = sinon_1.default
                        .stub()
                        .onFirstCall()
                        .returns(1)
                        .onSecondCall()
                        .returns(2)
                        .onThirdCall()
                        .returns(3);
                    callback = sinon_1.default.spy();
                    return [4 /*yield*/, Promise.all([
                            queue.request(request, '1', 'group').then(callback),
                            queue.request(request, '2', 'group').then(callback),
                            queue.request(request, '3', 'individual').then(callback)
                        ])];
                case 1:
                    _a.sent();
                    chai_1.expect(callback).to.have.been.calledThrice;
                    chai_1.expect(callback).to.have.been.calledWith(1);
                    chai_1.expect(callback).to.have.been.calledWith(3);
                    chai_1.expect(callback).to.have.been.calledWith(2);
                    return [2 /*return*/];
            }
        });
    }); });
    mocha_1.it('should not wait more than rate limit time', function () { return __awaiter(_this, void 0, void 0, function () {
        var queue, request, firstEnd, secondEnd;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queue = new src_1.default(Object.assign({}, params, { ignoreOverallOverheat: false }));
                    request = function () { return new Promise(function (resolve) { return setTimeout(resolve, 50); }); };
                    firstEnd = 0;
                    secondEnd = 0;
                    return [4 /*yield*/, Promise.all([
                            queue.request(request).then(function () { return (firstEnd = Date.now()); }),
                            queue.request(request).then(function () { return (secondEnd = Date.now()); })
                        ])];
                case 1:
                    _a.sent();
                    chai_1.expect(secondEnd - firstEnd).is.lte(60);
                    return [2 /*return*/];
            }
        });
    }); });
});
